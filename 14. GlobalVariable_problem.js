{
    /* <전역 변수의 문제점>

14.1 변수의 생명 주기
    변수의 생명 주기 : 메모리 공간을 점유하는 주기
    사실 변수 선언은 런타임 전에 이루어진다는 것은 '전역 변수'에만 해당
    자바스크립트의 '호이스팅'은 '스코프 단위'로 동작
    1) 지역 변수 : 함수가 호출되면 생성되고, 함수가 종료하면 소멸
        지역 변수의 생명 주기 >= 함수의 생명 주기
    2) 전역 변수 : 특별한 진입점 없음. 코드가 로드되자마자 곧바로 해석됨
        전역 변수의 생명 주기 = 전역 객체(window)의 생명 주기
        var 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티임

14.2 전역 변수의 문제점
    1) 암묵적 결합 : 모든 코드가 전역 변수를 참조하고 변경 가능. 가독성 나쁨, 의도치 않은 상태 변경 위험
    2) 긴 생명 주기 : 메모리 리소스도 오랜 기간 소비
    3) 스코프 체인 상에서 종점에 존재 : 전역 변수의 검색 속도가 '가장 느리다'
    4) 네임스페이스 오염 : 다른 파일 내에 '동일한 이름'으로 명명된 전역 변수 등등.. 예상치 못한 결과

14.3 전역 변수의 사용을 억제하는 방법
    전역 변수를 반드시 사용할 이유가 없으면 지역 변수 사용하자.
    변수의 스코프는 좁을수록 좋다.
    1) 즉시 실행 함수로 감싸기 : 모든 변수는 즉시 실행함수의 지역 변수가 됨
    2) 네임스페이스 객체 : 전역에  네임스페이스 역할 담당 객체를 생성, 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가?
        (그다지 유용하지 않음)
    3) 모듈 패턴(클로저 기반..)
    4) ES6 모듈 : <script type="module" src="sdfsf.mjs"></script>
        (아직까지는 이거보단 Webpack 등의 모듈 번들러 사용이 일반적) */
}
