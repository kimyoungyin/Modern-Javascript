// 13.1 스코프란?
//     모든 식별자 : 자신이 선언된 위치에 의해 다른 코드가 '식별자 자신'을 참조할 수 있는 유효 범위가 결정
//     -> 스코프
//     정의 : 식별자가 유효한 범위
//     자바스크립트 엔진에서의 스코프 : 자바스크립트 엔진이 식별자를 '검색'할 때 사용하는 규칙

// 13.2 스코프의 종류
//     스코프의 결정 : '변수 자신이 선언된 위치'에 의해 스코프 결정
//     1) 전역 변수 : 전역 스코프. 어디서든지 참조 가능
//     2) 지역 변수 : 지역 스코프. 자신의 지역 스코프와 하위 지역 스코프에서 유효

// 13.3 스코프 체인 : 스코프가 계층적으로 연결된 것
//     - 변수를 참조할 때 자바스크립트 엔진은 '스코프 체인'을 통해
//         참조 코드의 스코프 -> 상위 스코프 방향(단방향)으로 이동하여 선언된 변수 '검색'
//     - 스코프 체인은 '물리적인 실체'로 존재함.
//         0) 자바스크립트 엔진은 코드 실행 전, '스코프 체인'과 같은 자료구조인 렉시컬 환경(Lexical Environment)을 실제로 생성
//         1) 변수 선언 실행되면 변수 식별자가 위 자료구조(렉시컬 환경)에 키로 등록
//         2) 변수 할당이 일어나면, 이 자료구조의 변수 식별자에 해당하는 값 변경(변수 검색도 이 자료구조 상에서)
//     - 절대 하위 스코프로 내려가면서 식별자를 검색하지 않음

// 13.4 함수 레벨 스코프
//     특이한 스코프. 코드 블록이 아닌 '함수'에 의해서만 지역 스코프가 생성됨
//     - 함수가 아닌 다른 코드 블록 안에서 선언된 변수는 전역 변수처럼 인식됨(재할당 위험)

// 13.5 렉시컬 스코프 (함수 선언 관련)
//     1) 동적 스코프 : 함수를 어디서 '호출'했는지에 따라 상위 스코프 결정
//     2) 렉시컬 스코프 : 함수를 어디서 '정의'했는지에 따라 상위 스코프 결정. 대부분의 프로그래밍 언어가 이를 따름
//         함수 정의(선언 혹은 함수 표현식)가 실행된 함수 객체는 결정된 '상위 스코프'를 '기억'
