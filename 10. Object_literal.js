// 10.1 객체란?
// 자바스크립트를 구성하는 거의 모든 것이 객체(원시 값 제외 나머지)
// 변경 가능한 값(mutable value)
//프로퍼티 = 키, 값
//메서드 = 키 + 값(함수)

//10.2 객체 리터럴에 의한 객체 생성
// 객체 리터럴 : {} 내 0개 이상의 프로퍼티(키 : 값)
// 객체 리터럴은 값으로 평가되는 표힌식이므로, 중괄호 뒤에 ; 붙여야함
// 그 외 객체 생성 방식 : 모두 함수를 사용해 생성

// 10.3 프로퍼티
// 키 : 식별자 네이밍 규칙을 따르지 않을 경우 ""로 묶어줘야
// 같은 이름의 키를 중복 선언 -> 나중 프로퍼티가 '덮어씀'(에러 발생 안함)

// 10.4 메서드
// 자바스크립트 함수도 객체(일급 객체) -> 값을 취급 가능 -> 프로퍼티 값으로 사용 가능

// 10.5 프로퍼티 접근
// (1) 대괄호 프로퍼티 접근 연산자 : 프로퍼티 키는 반드시 따옴표로 감싼 문자열이어야 한다.
// (2) 마침표 프로퍼티 접근 연산자
// 주의 : 네이밍 규칙 준수하지 않으면(유효한 이름 아님) 반드시 "대괄호 표기법"
// 주의 : 객체에 존재하지 않는 프로퍼티 접근 -> undefined(오류 안남)

// 10.6 프로퍼티 값 갱신 + 10.7 프로퍼티 동적 생성
// 존재하거나, 존재하지 않은 프로퍼티에 값을 할당하면 자동으로

// 10.8 프로퍼티 삭제 : delete 연산자
// var person = {
//     name: "Lee"
// }
// delete person.name
// console.log(person)

// 10.9 ES6 객체 리터럴의 확장 기능
// (1) 프로퍼티 축약 표현
// let x = 1,
//     y = 2;
// const obj = { x, y };
// console.log(obj);
// (2) 계산된 프로퍼티 이름
// (3) 메서드 축약 표현(function 키워드 생략)
