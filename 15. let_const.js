// 15.1 var 키워드로 선언한 변수의 문제점
//     1) 같은 변수 중복 선언 가능 : 초기화문은 동작, 초기화문 없는 변수 선언문은 무시. 에러 발생 안함
//     2) 함수 레벨 스코프 : 조건문, 반복문 코드블록 내에서 선언해도 전역 변수가 됨
//     3) 변수 호이스팅 : 할당문 전에 호출 시 undefined 반환. 에러는 아니지만 흐름상 맞지 않고, 가독성을 떨어뜨림

// 15.2 let 키워드
//     1) 같은 이름의 변수 중복 선언 금지 -> 문법 에러
//     2) 블록 레벨 스코프
//     3) 변수 호이스팅이 발생하지 않는 것처럼 동작함.

//         사실 선언 단계는 초기화 단계를 포함 : 선언 -> 초기화 -> 할당

//         호이스팅
//             1) var 키워드 : 호이스팅(선언, 초기화) /-> 할당문에 도착 시 할당(재할당)
//                 선언문보다 먼저 변수 사용 시 undefined 반환
//             2) let 키워드 : 호이스팅(선언만) /-> 선언문 도착시 초기화 -> 할당문 도착 시 할당(재할당)
//                 선언문보다 먼저 변수 사용 시 초기화가 되지 않았으므로, 참조에러 발생(일시적 사각지대). 하지만 호이스팅이 이뤄지는 건 맞음.

//     4) 전역 변수로 let 키워드를 사용해도, 이는 window의 프로퍼티가 아님(23장)

//     15.3 const 키워드(상수)
//         1) 선언과 동시에 초기화해야 함. 아니면 문법 오류
//             const foo = 1
//         2) 블록 레벨 스코프
//         3) 재할당 금지
//         4) 가독성, 유지보수의 편의를 위해 적극적으로 사용
//         5) 네이밍 규칙  : 대문자, 스네이크 케이스
//         6) 객체는 간접적으로 변경이 가능(참조값은 불변)

//     15.4 var vs let vs const
//         1) ES6 사용하면 var 사용 안함
//         2) 재할당이 필요할 때 let 사용. 단 변수의 스코프를 최대한 좁게
//         3) 재할당이 필요할 지 잘 모르겠으면 일단 const 로 선언하고, 나중에 변경하자
