// 12.1 함수란
// 매개변수 + 인수 + 반환 값
// '함수 정의'를 통해 생성
// 함수 : 객체 타입의 값

// 12.3 함수 리터럴
// function 키워드 + 함수 이름(생략가능) + 매개변수 목록(순서) + 함수 몸체({})
// 함수 리터럴 - (평가) -> 객체
// 함수 이름은 함수 몸체 내에서만 참조 가능한 식별자
// 함수는 다른 객체와 다르게 "호출" 가능

// 12.4 함수 정의(선언과 같지 않음)
// (1) 함수 선언문
// - 함수 이름 생략 불가
// - 표현식이 아닌 문(변수 할당 불가)
// - {}를 함수 선언문으로 해석
// - 호출 가능(암묵적으로 함수이름이 식별자로 p.162)
// - 함수 호이스팅(호출 전 선언 규칙 무시) : 함수 선언문 이전에 작성된 함수 호출 가능
// - JSON 창안한 사람도 함수 선언문보다 함수 표현식 권장
// function add(x, y) {
//     return x+y;
// }
// (2) 함수 표현식(변수 선언문 + 변수 할당문 한번에 기술)
// - 함수 이름 생략 가능.
// - 값으로 평가되는 문맥(할당 혹은 ())(표현식인 문, 변수 할당 가능, 함수 리터럴 "표현식"으로 해석),
// - 호출 불가. 대신 할당된 변수가 식별자로 작용하여 변수를 통한 호출 가능
// - 변수 호이스팅 : 변수 선언문이라 보면 됨. 할당된 변수가 undefined로 초기화되며, 변수 선언 전에 호출 불가
// var add = function add(x,y){
//     return x+y;
// };
// (3) Function 생성자 함수
// var add = new Function("x","y", "return x+y")
// (4) 화살표 함수(ES6)
// var add = (x,y) => x + y

// 12.5 함수 호출
// 인수 > 매개변수 -> 무시
// 인수 < 매개변수 -> 부족한 매개변수 undefined
// return : 함수 몸체를 빠져나감 + 반환. return 문 작성 안할 시 undefined

// 12.7 다양한 함수의 형태
// (1) 즉시 실행 함수 : 익명 함수 일반적. 다시 호출 불가. ()로 감싸야
// (function (){
//     var a=3
//     var b=5
//     return a+b;
// }());
// (2) 재귀함수, 중첩 함수
// (3) 콜백 함수 : 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수. 배열 고차함수, 비동기 처리에 중요
// (+) 순수 함수 vs 비순수 함수(부수 효과 : 외부 상태의 의존 혹은 외부 상태 변경)
